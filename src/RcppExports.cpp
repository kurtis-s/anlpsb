// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fnLogLikNoGamma
double fnLogLikNoGamma(const double& y_tkj, const double& s_j, const double& r_tk, const double& mu_tj);
RcppExport SEXP _anlpsb_fnLogLikNoGamma(SEXP y_tkjSEXP, SEXP s_jSEXP, SEXP r_tkSEXP, SEXP mu_tjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type y_tkj(y_tkjSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type r_tk(r_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_tj(mu_tjSEXP);
    rcpp_result_gen = Rcpp::wrap(fnLogLikNoGamma(y_tkj, s_j, r_tk, mu_tj));
    return rcpp_result_gen;
END_RCPP
}
// fnLogLikNoFac
double fnLogLikNoFac(const double& y_tkj, const double& s_j, const double& r_tk, const double& mu_tj);
RcppExport SEXP _anlpsb_fnLogLikNoFac(SEXP y_tkjSEXP, SEXP s_jSEXP, SEXP r_tkSEXP, SEXP mu_tjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type y_tkj(y_tkjSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type r_tk(r_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_tj(mu_tjSEXP);
    rcpp_result_gen = Rcpp::wrap(fnLogLikNoFac(y_tkj, s_j, r_tk, mu_tj));
    return rcpp_result_gen;
END_RCPP
}
// fnOtuLogLikNoGamma
double fnOtuLogLikNoGamma(const double& s_j, NumericVector r_vec, NumericVector mu_j_vec, NumericVector rep_K, NumericVector y_j_vec);
RcppExport SEXP _anlpsb_fnOtuLogLikNoGamma(SEXP s_jSEXP, SEXP r_vecSEXP, SEXP mu_j_vecSEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnOtuLogLikNoGamma(s_j, r_vec, mu_j_vec, rep_K, y_j_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnOtuLogLikNoFac
double fnOtuLogLikNoFac(const double& s_j, NumericVector r_vec, NumericVector mu_j_vec, NumericVector rep_K, NumericVector y_j_vec);
RcppExport SEXP _anlpsb_fnOtuLogLikNoFac(SEXP s_jSEXP, SEXP r_vecSEXP, SEXP mu_j_vecSEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnOtuLogLikNoFac(s_j, r_vec, mu_j_vec, rep_K, y_j_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnTimepointLogLikNoGamma
double fnTimepointLogLikNoGamma(NumericVector mu_t_vec, NumericVector s_vec, const double& r_tk, NumericVector y_tk_vec);
RcppExport SEXP _anlpsb_fnTimepointLogLikNoGamma(SEXP mu_t_vecSEXP, SEXP s_vecSEXP, SEXP r_tkSEXP, SEXP y_tk_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type mu_t_vec(mu_t_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type r_tk(r_tkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_tk_vec(y_tk_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnTimepointLogLikNoGamma(mu_t_vec, s_vec, r_tk, y_tk_vec));
    return rcpp_result_gen;
END_RCPP
}
// acceptProposal
bool acceptProposal(const double& curr_log_lik, const double& prop_log_lik, const double log_curr_to_prop_prob, const double log_prop_to_curr_prob);
RcppExport SEXP _anlpsb_acceptProposal(SEXP curr_log_likSEXP, SEXP prop_log_likSEXP, SEXP log_curr_to_prop_probSEXP, SEXP log_prop_to_curr_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type curr_log_lik(curr_log_likSEXP);
    Rcpp::traits::input_parameter< const double& >::type prop_log_lik(prop_log_likSEXP);
    Rcpp::traits::input_parameter< const double >::type log_curr_to_prop_prob(log_curr_to_prop_probSEXP);
    Rcpp::traits::input_parameter< const double >::type log_prop_to_curr_prob(log_prop_to_curr_probSEXP);
    rcpp_result_gen = Rcpp::wrap(acceptProposal(curr_log_lik, prop_log_lik, log_curr_to_prop_prob, log_prop_to_curr_prob));
    return rcpp_result_gen;
END_RCPP
}
// fnSjTildeLogLik
double fnSjTildeLogLik(const double& s_j, NumericVector r_vec, NumericVector mu_j_vec, NumericVector rep_K, NumericVector y_j_vec, const double& h_scal, const double& var_sig_2);
RcppExport SEXP _anlpsb_fnSjTildeLogLik(SEXP s_jSEXP, SEXP r_vecSEXP, SEXP mu_j_vecSEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP, SEXP h_scalSEXP, SEXP var_sig_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_scal(h_scalSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_sig_2(var_sig_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSjTildeLogLik(s_j, r_vec, mu_j_vec, rep_K, y_j_vec, h_scal, var_sig_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampSVec
void fnSampSVec(NumericVector s_vec, NumericVector s_tilde_vec, NumericVector r_vec, NumericMatrix Mu_mat, NumericVector rep_K, NumericMatrix Y_mat, const double& h_scal, const double& var_sig_2, const double& s_j_tilde_proposal_sd);
RcppExport SEXP _anlpsb_fnSampSVec(SEXP s_vecSEXP, SEXP s_tilde_vecSEXP, SEXP r_vecSEXP, SEXP Mu_matSEXP, SEXP rep_KSEXP, SEXP Y_matSEXP, SEXP h_scalSEXP, SEXP var_sig_2SEXP, SEXP s_j_tilde_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_tilde_vec(s_tilde_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type h_scal(h_scalSEXP);
    Rcpp::traits::input_parameter< const double& >::type var_sig_2(var_sig_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j_tilde_proposal_sd(s_j_tilde_proposal_sdSEXP);
    fnSampSVec(s_vec, s_tilde_vec, r_vec, Mu_mat, rep_K, Y_mat, h_scal, var_sig_2, s_j_tilde_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnWlLogLik
double fnWlLogLik(const int& ell_idx1, const double& w_ell, NumericVector param_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, const double& upsilon, const double& a_w, const double& b_w, const double& u_2);
RcppExport SEXP _anlpsb_fnWlLogLik(SEXP ell_idx1SEXP, SEXP w_ellSEXP, SEXP param_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP a_wSEXP, SEXP b_wSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type ell_idx1(ell_idx1SEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell(w_ellSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_w(a_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_w(b_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnWlLogLik(ell_idx1, w_ell, param_vec, lambda_vec, c_vec, eta_vec, upsilon, a_w, b_w, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampWVec
void fnSampWVec(NumericVector w_vec, NumericVector param_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, const double& upsilon, const double& a_w, const double& b_w, const double& u_2, const double& w_ell_proposal_sd);
RcppExport SEXP _anlpsb_fnSampWVec(SEXP w_vecSEXP, SEXP param_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP a_wSEXP, SEXP b_wSEXP, SEXP u_2SEXP, SEXP w_ell_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_w(a_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_w(b_wSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell_proposal_sd(w_ell_proposal_sdSEXP);
    fnSampWVec(w_vec, param_vec, lambda_vec, c_vec, eta_vec, upsilon, a_w, b_w, u_2, w_ell_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampEtaVec
void fnSampEtaVec(NumericVector eta_vec, NumericVector param_vec, NumericVector w_vec, NumericVector lambda_vec, NumericVector c_vec, const double& u_2, const double& upsilon, const double& b_eta_2);
RcppExport SEXP _anlpsb_fnSampEtaVec(SEXP eta_vecSEXP, SEXP param_vecSEXP, SEXP w_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP u_2SEXP, SEXP upsilonSEXP, SEXP b_eta_2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_eta_2(b_eta_2SEXP);
    fnSampEtaVec(eta_vec, param_vec, w_vec, lambda_vec, c_vec, u_2, upsilon, b_eta_2);
    return R_NilValue;
END_RCPP
}
// fnSampC
int fnSampC(const double& param, NumericVector psi_vec, NumericVector w_vec, NumericVector eta_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _anlpsb_fnSampC(SEXP paramSEXP, SEXP psi_vecSEXP, SEXP w_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type param(paramSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnSampC(param, psi_vec, w_vec, eta_vec, upsilon, u_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampCVec
void fnSampCVec(IntegerVector c_vec, IntegerVector d_vec, NumericVector param_vec, NumericVector psi_vec, NumericVector w_vec, NumericVector eta_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _anlpsb_fnSampCVec(SEXP c_vecSEXP, SEXP d_vecSEXP, SEXP param_vecSEXP, SEXP psi_vecSEXP, SEXP w_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type d_vec(d_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_vec(psi_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    fnSampCVec(c_vec, d_vec, param_vec, psi_vec, w_vec, eta_vec, upsilon, u_2);
    return R_NilValue;
END_RCPP
}
// fnSampLambdaVec
void fnSampLambdaVec(IntegerVector lambda_vec, NumericVector param_vec, IntegerVector c_vec, NumericVector w_vec, NumericVector eta_vec, const double& upsilon, const double& u_2);
RcppExport SEXP _anlpsb_fnSampLambdaVec(SEXP lambda_vecSEXP, SEXP param_vecSEXP, SEXP c_vecSEXP, SEXP w_vecSEXP, SEXP eta_vecSEXP, SEXP upsilonSEXP, SEXP u_2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type param_vec(param_vecSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon(upsilonSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    fnSampLambdaVec(lambda_vec, param_vec, c_vec, w_vec, eta_vec, upsilon, u_2);
    return R_NilValue;
END_RCPP
}
// fnRtkTildeLogLik
double fnRtkTildeLogLik(const double& r_tk, NumericVector mu_t_vec, NumericVector s_vec, const int& lambda_tk, const double& eta_ell, const double& w_ell, const double& upsilon_r, const double& u_2, NumericVector y_tk_vec);
RcppExport SEXP _anlpsb_fnRtkTildeLogLik(SEXP r_tkSEXP, SEXP mu_t_vecSEXP, SEXP s_vecSEXP, SEXP lambda_tkSEXP, SEXP eta_ellSEXP, SEXP w_ellSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP y_tk_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type r_tk(r_tkSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_t_vec(mu_t_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< const int& >::type lambda_tk(lambda_tkSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_ell(eta_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell(w_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_tk_vec(y_tk_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnRtkTildeLogLik(r_tk, mu_t_vec, s_vec, lambda_tk, eta_ell, w_ell, upsilon_r, u_2, y_tk_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampRVec
void fnSampRVec(NumericVector r_vec, NumericVector r_tilde_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, NumericVector rep_K, const double& upsilon_r, const double& u_2, NumericMatrix Y_mat, const double& r_tk_tilde_proposal_sd);
RcppExport SEXP _anlpsb_fnSampRVec(SEXP r_vecSEXP, SEXP r_tilde_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP rep_KSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP Y_matSEXP, SEXP r_tk_tilde_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_tilde_vec(r_tilde_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type r_tk_tilde_proposal_sd(r_tk_tilde_proposal_sdSEXP);
    fnSampRVec(r_vec, r_tilde_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, rep_K, upsilon_r, u_2, Y_mat, r_tk_tilde_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampRVecJoint
void fnSampRVecJoint(NumericVector r_vec, NumericVector r_tilde_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, NumericVector rep_K, const double& upsilon_r, const double& u_2, NumericMatrix Y_mat, const double& r_tk_tilde_proposal_sd);
RcppExport SEXP _anlpsb_fnSampRVecJoint(SEXP r_vecSEXP, SEXP r_tilde_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP rep_KSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP Y_matSEXP, SEXP r_tk_tilde_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_tilde_vec(r_tilde_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type r_tk_tilde_proposal_sd(r_tk_tilde_proposal_sdSEXP);
    fnSampRVecJoint(r_vec, r_tilde_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, rep_K, upsilon_r, u_2, Y_mat, r_tk_tilde_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampRVecJointVertical
void fnSampRVecJointVertical(NumericVector r_vec, NumericVector r_tilde_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, NumericVector rep_K, const double& upsilon_r, const double& u_2, NumericMatrix Y_mat, const double& r_tk_tilde_proposal_sd);
RcppExport SEXP _anlpsb_fnSampRVecJointVertical(SEXP r_vecSEXP, SEXP r_tilde_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP rep_KSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP Y_matSEXP, SEXP r_tk_tilde_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_tilde_vec(r_tilde_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type r_tk_tilde_proposal_sd(r_tk_tilde_proposal_sdSEXP);
    fnSampRVecJointVertical(r_vec, r_tilde_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, rep_K, upsilon_r, u_2, Y_mat, r_tk_tilde_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnAlpha0jLogLik
double fnAlpha0jLogLik(const double& alpha0_j, NumericVector r_vec, NumericVector mu_j_vec, const double& s_j, const int& lambda_j, const double& eta_ell, const double& w_ell, const double& upsilon_r, const double& u_2, NumericVector rep_K, NumericVector y_j_vec);
RcppExport SEXP _anlpsb_fnAlpha0jLogLik(SEXP alpha0_jSEXP, SEXP r_vecSEXP, SEXP mu_j_vecSEXP, SEXP s_jSEXP, SEXP lambda_jSEXP, SEXP eta_ellSEXP, SEXP w_ellSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha0_j(alpha0_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< const int& >::type lambda_j(lambda_jSEXP);
    Rcpp::traits::input_parameter< const double& >::type eta_ell(eta_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type w_ell(w_ellSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnAlpha0jLogLik(alpha0_j, r_vec, mu_j_vec, s_j, lambda_j, eta_ell, w_ell, upsilon_r, u_2, rep_K, y_j_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampAlpha0Vec
void fnSampAlpha0Vec(NumericVector alpha0_vec, NumericVector r_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, const double& upsilon_r, const double& u_2, NumericVector rep_K, NumericMatrix Y_mat, const double& alpha0_j_proposal_sd);
RcppExport SEXP _anlpsb_fnSampAlpha0Vec(SEXP alpha0_vecSEXP, SEXP r_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP rep_KSEXP, SEXP Y_matSEXP, SEXP alpha0_j_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha0_vec(alpha0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha0_j_proposal_sd(alpha0_j_proposal_sdSEXP);
    fnSampAlpha0Vec(alpha0_vec, r_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, upsilon_r, u_2, rep_K, Y_mat, alpha0_j_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampAlpha0VecJoint
void fnSampAlpha0VecJoint(NumericVector alpha0_vec, NumericVector r_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, const double& upsilon_r, const double& u_2, NumericVector rep_K, NumericMatrix Y_mat, const double& alpha0_j_proposal_sd);
RcppExport SEXP _anlpsb_fnSampAlpha0VecJoint(SEXP alpha0_vecSEXP, SEXP r_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP rep_KSEXP, SEXP Y_matSEXP, SEXP alpha0_j_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha0_vec(alpha0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha0_j_proposal_sd(alpha0_j_proposal_sdSEXP);
    fnSampAlpha0VecJoint(alpha0_vec, r_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, upsilon_r, u_2, rep_K, Y_mat, alpha0_j_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampAlpha0VecJointVertical
void fnSampAlpha0VecJointVertical(NumericVector alpha0_vec, NumericVector r_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector lambda_vec, NumericVector c_vec, NumericVector eta_vec, NumericVector w_vec, const double& upsilon_r, const double& u_2, NumericVector rep_K, NumericMatrix Y_mat, const double& alpha0_j_proposal_sd);
RcppExport SEXP _anlpsb_fnSampAlpha0VecJointVertical(SEXP alpha0_vecSEXP, SEXP r_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP lambda_vecSEXP, SEXP c_vecSEXP, SEXP eta_vecSEXP, SEXP w_vecSEXP, SEXP upsilon_rSEXP, SEXP u_2SEXP, SEXP rep_KSEXP, SEXP Y_matSEXP, SEXP alpha0_j_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type alpha0_vec(alpha0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda_vec(lambda_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type c_vec(c_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type eta_vec(eta_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type w_vec(w_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type upsilon_r(upsilon_rSEXP);
    Rcpp::traits::input_parameter< const double& >::type u_2(u_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha0_j_proposal_sd(alpha0_j_proposal_sdSEXP);
    fnSampAlpha0VecJointVertical(alpha0_vec, r_vec, Mu_mat, s_vec, lambda_vec, c_vec, eta_vec, w_vec, upsilon_r, u_2, rep_K, Y_mat, alpha0_j_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnThetamjLogLik
double fnThetamjLogLik(const double& theta_mj, const double& tau_j_2, const double& s_j, NumericVector r_vec, NumericVector mu_j_vec, NumericVector rep_K, NumericVector y_j_vec);
RcppExport SEXP _anlpsb_fnThetamjLogLik(SEXP theta_mjSEXP, SEXP tau_j_2SEXP, SEXP s_jSEXP, SEXP r_vecSEXP, SEXP mu_j_vecSEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type theta_mj(theta_mjSEXP);
    Rcpp::traits::input_parameter< const double& >::type tau_j_2(tau_j_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnThetamjLogLik(theta_mj, tau_j_2, s_j, r_vec, mu_j_vec, rep_K, y_j_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnSampThetaMat
void fnSampThetaMat(NumericMatrix Theta_mat, NumericVector tau_2_vec, NumericVector s_vec, NumericVector r_vec, NumericMatrix Mu_mat, NumericVector rep_K, NumericMatrix K_mat, NumericMatrix Y_mat, const double& theta_mj_proposal_sd);
RcppExport SEXP _anlpsb_fnSampThetaMat(SEXP Theta_matSEXP, SEXP tau_2_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP Mu_matSEXP, SEXP rep_KSEXP, SEXP K_matSEXP, SEXP Y_matSEXP, SEXP theta_mj_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Theta_mat(Theta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type tau_2_vec(tau_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type K_mat(K_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type theta_mj_proposal_sd(theta_mj_proposal_sdSEXP);
    fnSampThetaMat(Theta_mat, tau_2_vec, s_vec, r_vec, Mu_mat, rep_K, K_mat, Y_mat, theta_mj_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampSigma2Vec
void fnSampSigma2Vec(NumericVector sigma_2_vec, NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericVector iota_vec, Function rtigamma, const double& a_sigma, const double& b_sigma);
RcppExport SEXP _anlpsb_fnSampSigma2Vec(SEXP sigma_2_vecSEXP, SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP iota_vecSEXP, SEXP rtigammaSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< Function >::type rtigamma(rtigammaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sigma(b_sigmaSEXP);
    fnSampSigma2Vec(sigma_2_vec, Beta_mat, Gamma_mat, iota_vec, rtigamma, a_sigma, b_sigma);
    return R_NilValue;
END_RCPP
}
// fnMujVecFromBetajp
NumericVector fnMujVecFromBetajp(const double& beta_jp, const double& beta_jp_curr, NumericVector mu_j_vec_curr, NumericVector z_p_vec);
RcppExport SEXP _anlpsb_fnMujVecFromBetajp(SEXP beta_jpSEXP, SEXP beta_jp_currSEXP, SEXP mu_j_vec_currSEXP, SEXP z_p_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type beta_jp(beta_jpSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_jp_curr(beta_jp_currSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec_curr(mu_j_vec_currSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type z_p_vec(z_p_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(fnMujVecFromBetajp(beta_jp, beta_jp_curr, mu_j_vec_curr, z_p_vec));
    return rcpp_result_gen;
END_RCPP
}
// fnBetajpPriorLik
double fnBetajpPriorLik(const double& beta_jp, const double& sigma_p_2, const double& iota_p);
RcppExport SEXP _anlpsb_fnBetajpPriorLik(SEXP beta_jpSEXP, SEXP sigma_p_2SEXP, SEXP iota_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type beta_jp(beta_jpSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fnBetajpPriorLik(beta_jp, sigma_p_2, iota_p));
    return rcpp_result_gen;
END_RCPP
}
// fnBetajpLogLik
double fnBetajpLogLik(const double& beta_jp, NumericVector mu_j_vec, const double& s_j, NumericVector r_vec, const double& sigma_p_2, NumericVector rep_K, NumericVector y_j_vec, const double& iota_p);
RcppExport SEXP _anlpsb_fnBetajpLogLik(SEXP beta_jpSEXP, SEXP mu_j_vecSEXP, SEXP s_jSEXP, SEXP r_vecSEXP, SEXP sigma_p_2SEXP, SEXP rep_KSEXP, SEXP y_j_vecSEXP, SEXP iota_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type beta_jp(beta_jpSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type mu_j_vec(mu_j_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type s_j(s_jSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_j_vec(y_j_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fnBetajpLogLik(beta_jp, mu_j_vec, s_j, r_vec, sigma_p_2, rep_K, y_j_vec, iota_p));
    return rcpp_result_gen;
END_RCPP
}
// fnProposeBetajp
double fnProposeBetajp(int gamma_jp, double sigma_p, double iota_p);
RcppExport SEXP _anlpsb_fnProposeBetajp(SEXP gamma_jpSEXP, SEXP sigma_pSEXP, SEXP iota_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type gamma_jp(gamma_jpSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_p(sigma_pSEXP);
    Rcpp::traits::input_parameter< double >::type iota_p(iota_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fnProposeBetajp(gamma_jp, sigma_p, iota_p));
    return rcpp_result_gen;
END_RCPP
}
// fnSampBetaMat
void fnSampBetaMat(NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector r_vec, NumericMatrix X_mat, NumericVector sigma_2_vec, NumericVector rep_K, NumericMatrix Y_mat, NumericVector iota_vec, const double& beta_jp_proposal_sd);
RcppExport SEXP _anlpsb_fnSampBetaMat(SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP X_matSEXP, SEXP sigma_2_vecSEXP, SEXP rep_KSEXP, SEXP Y_matSEXP, SEXP iota_vecSEXP, SEXP beta_jp_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_jp_proposal_sd(beta_jp_proposal_sdSEXP);
    fnSampBetaMat(Beta_mat, Gamma_mat, Mu_mat, s_vec, r_vec, X_mat, sigma_2_vec, rep_K, Y_mat, iota_vec, beta_jp_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnProposeBetajpHat
double fnProposeBetajpHat(const double& beta_jp_curr, const double& iota_p, const double& sigma_p_2);
RcppExport SEXP _anlpsb_fnProposeBetajpHat(SEXP beta_jp_currSEXP, SEXP iota_pSEXP, SEXP sigma_p_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type beta_jp_curr(beta_jp_currSEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnProposeBetajpHat(beta_jp_curr, iota_p, sigma_p_2));
    return rcpp_result_gen;
END_RCPP
}
// fnLogGammaPrior
double fnLogGammaPrior(int gamma_jp, double pi0_p, double pi1_p);
RcppExport SEXP _anlpsb_fnLogGammaPrior(SEXP gamma_jpSEXP, SEXP pi0_pSEXP, SEXP pi1_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type gamma_jp(gamma_jpSEXP);
    Rcpp::traits::input_parameter< double >::type pi0_p(pi0_pSEXP);
    Rcpp::traits::input_parameter< double >::type pi1_p(pi1_pSEXP);
    rcpp_result_gen = Rcpp::wrap(fnLogGammaPrior(gamma_jp, pi0_p, pi1_p));
    return rcpp_result_gen;
END_RCPP
}
// fnLogBetajpTransition
double fnLogBetajpTransition(const double& beta_jp_hat, const double& gamma_jp, const double& iota_p, const double& sigma_p_2);
RcppExport SEXP _anlpsb_fnLogBetajpTransition(SEXP beta_jp_hatSEXP, SEXP gamma_jpSEXP, SEXP iota_pSEXP, SEXP sigma_p_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type beta_jp_hat(beta_jp_hatSEXP);
    Rcpp::traits::input_parameter< const double& >::type gamma_jp(gamma_jpSEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnLogBetajpTransition(beta_jp_hat, gamma_jp, iota_p, sigma_p_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampBetaMatGammaMatJoint
void fnSampBetaMatGammaMatJoint(NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericMatrix Mu_mat, NumericMatrix X_mat, NumericVector sigma_2_vec, NumericVector iota_vec, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector pi0_vec, NumericVector pi1_vec, NumericMatrix Y_mat, const double& beta_jp_proposal_sd);
RcppExport SEXP _anlpsb_fnSampBetaMatGammaMatJoint(SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP Mu_matSEXP, SEXP X_matSEXP, SEXP sigma_2_vecSEXP, SEXP iota_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP pi0_vecSEXP, SEXP pi1_vecSEXP, SEXP Y_matSEXP, SEXP beta_jp_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi0_vec(pi0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1_vec(pi1_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_jp_proposal_sd(beta_jp_proposal_sdSEXP);
    fnSampBetaMatGammaMatJoint(Beta_mat, Gamma_mat, Mu_mat, X_mat, sigma_2_vec, iota_vec, s_vec, r_vec, rep_K, pi0_vec, pi1_vec, Y_mat, beta_jp_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnBetaGammaAddSwpDel
void fnBetaGammaAddSwpDel(NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericVector sigma_2_vec, NumericVector iota_vec, NumericMatrix Mu_mat, NumericMatrix X_mat, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector pi0_vec, NumericVector pi1_vec, NumericMatrix Y_mat);
RcppExport SEXP _anlpsb_fnBetaGammaAddSwpDel(SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP sigma_2_vecSEXP, SEXP iota_vecSEXP, SEXP Mu_matSEXP, SEXP X_matSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP pi0_vecSEXP, SEXP pi1_vecSEXP, SEXP Y_matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi0_vec(pi0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1_vec(pi1_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    fnBetaGammaAddSwpDel(Beta_mat, Gamma_mat, sigma_2_vec, iota_vec, Mu_mat, X_mat, s_vec, r_vec, rep_K, pi0_vec, pi1_vec, Y_mat);
    return R_NilValue;
END_RCPP
}
// fnIotapLogLik
double fnIotapLogLik(const double& iota_p, NumericVector beta_p_vec, NumericVector gamma_p_vec, const double& sigma_p_2, const double& smallest_beta, const double& a_iota, const double& b_iota);
RcppExport SEXP _anlpsb_fnIotapLogLik(SEXP iota_pSEXP, SEXP beta_p_vecSEXP, SEXP gamma_p_vecSEXP, SEXP sigma_p_2SEXP, SEXP smallest_betaSEXP, SEXP a_iotaSEXP, SEXP b_iotaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_p_vec(beta_p_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_p_vec(gamma_p_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    Rcpp::traits::input_parameter< const double& >::type smallest_beta(smallest_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_iota(a_iotaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_iota(b_iotaSEXP);
    rcpp_result_gen = Rcpp::wrap(fnIotapLogLik(iota_p, beta_p_vec, gamma_p_vec, sigma_p_2, smallest_beta, a_iota, b_iota));
    return rcpp_result_gen;
END_RCPP
}
// fnSampIotaVec
void fnSampIotaVec(NumericVector iota_vec, NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericVector sigma_2_vec, const double& a_iota, const double& b_iota, const double& iota_p_proposal_sd);
RcppExport SEXP _anlpsb_fnSampIotaVec(SEXP iota_vecSEXP, SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP sigma_2_vecSEXP, SEXP a_iotaSEXP, SEXP b_iotaSEXP, SEXP iota_p_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_iota(a_iotaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_iota(b_iotaSEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p_proposal_sd(iota_p_proposal_sdSEXP);
    fnSampIotaVec(iota_vec, Beta_mat, Gamma_mat, sigma_2_vec, a_iota, b_iota, iota_p_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnGetCurrCat
double fnGetCurrCat(NumericVector categorical_vector);
RcppExport SEXP _anlpsb_fnGetCurrCat(SEXP categorical_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type categorical_vector(categorical_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(fnGetCurrCat(categorical_vector));
    return rcpp_result_gen;
END_RCPP
}
// fnImputeZ
void fnImputeZ(NumericMatrix X_mat, NumericMatrix Miss_var_ind_mat, NumericVector max_miss_cat_vec, NumericVector first_p_missing_idx1_vec, NumericMatrix Mu_mat, NumericMatrix Beta_mat, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector rep_K_cumsum, NumericMatrix Y_mat);
RcppExport SEXP _anlpsb_fnImputeZ(SEXP X_matSEXP, SEXP Miss_var_ind_matSEXP, SEXP max_miss_cat_vecSEXP, SEXP first_p_missing_idx1_vecSEXP, SEXP Mu_matSEXP, SEXP Beta_matSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP rep_K_cumsumSEXP, SEXP Y_matSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Miss_var_ind_mat(Miss_var_ind_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type max_miss_cat_vec(max_miss_cat_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type first_p_missing_idx1_vec(first_p_missing_idx1_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K_cumsum(rep_K_cumsumSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    fnImputeZ(X_mat, Miss_var_ind_mat, max_miss_cat_vec, first_p_missing_idx1_vec, Mu_mat, Beta_mat, s_vec, r_vec, rep_K, rep_K_cumsum, Y_mat);
    return R_NilValue;
END_RCPP
}
// fnDLogInvGamma
double fnDLogInvGamma(const double& x, const double& a, const double& b);
RcppExport SEXP _anlpsb_fnDLogInvGamma(SEXP xSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const double& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(fnDLogInvGamma(x, a, b));
    return rcpp_result_gen;
END_RCPP
}
// fnIotapSigmapJointLogLik
double fnIotapSigmapJointLogLik(const double& iota_p, const double& sigma_p_2, NumericVector beta_p_vec, NumericVector gamma_p_vec, NumericMatrix Mu_mat, NumericVector s_vec, NumericVector r_vec, const double& pi0_p, const double& pi1_p, NumericVector rep_K, const double& a_iota, const double& b_iota, const double& a_sigma, const double& b_sigma, NumericMatrix Y_mat);
RcppExport SEXP _anlpsb_fnIotapSigmapJointLogLik(SEXP iota_pSEXP, SEXP sigma_p_2SEXP, SEXP beta_p_vecSEXP, SEXP gamma_p_vecSEXP, SEXP Mu_matSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP pi0_pSEXP, SEXP pi1_pSEXP, SEXP rep_KSEXP, SEXP a_iotaSEXP, SEXP b_iotaSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP Y_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    Rcpp::traits::input_parameter< NumericVector >::type beta_p_vec(beta_p_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_p_vec(gamma_p_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type pi0_p(pi0_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type pi1_p(pi1_pSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_iota(a_iotaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_iota(b_iotaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    rcpp_result_gen = Rcpp::wrap(fnIotapSigmapJointLogLik(iota_p, sigma_p_2, beta_p_vec, gamma_p_vec, Mu_mat, s_vec, r_vec, pi0_p, pi1_p, rep_K, a_iota, b_iota, a_sigma, b_sigma, Y_mat));
    return rcpp_result_gen;
END_RCPP
}
// fnConvertBetaHat
double fnConvertBetaHat(double& beta_jp_hat, const double& iota_p, const double& sigma_p_2);
RcppExport SEXP _anlpsb_fnConvertBetaHat(SEXP beta_jp_hatSEXP, SEXP iota_pSEXP, SEXP sigma_p_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type beta_jp_hat(beta_jp_hatSEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p(iota_pSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2(sigma_p_2SEXP);
    rcpp_result_gen = Rcpp::wrap(fnConvertBetaHat(beta_jp_hat, iota_p, sigma_p_2));
    return rcpp_result_gen;
END_RCPP
}
// fnSampIotaVecSigma2VecJoint
void fnSampIotaVecSigma2VecJoint(NumericVector sigma_2_vec, NumericVector iota_vec, NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericMatrix Mu_mat, NumericMatrix X_mat, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector pi0_vec, NumericVector pi1_vec, const double& a_sigma, const double& b_sigma, const double& a_iota, const double& b_iota, NumericMatrix Y_mat, const double& iota_p_joint_proposal_sd, const double& sigma_p_2_joint_proposal_sd);
RcppExport SEXP _anlpsb_fnSampIotaVecSigma2VecJoint(SEXP sigma_2_vecSEXP, SEXP iota_vecSEXP, SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP Mu_matSEXP, SEXP X_matSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP pi0_vecSEXP, SEXP pi1_vecSEXP, SEXP a_sigmaSEXP, SEXP b_sigmaSEXP, SEXP a_iotaSEXP, SEXP b_iotaSEXP, SEXP Y_matSEXP, SEXP iota_p_joint_proposal_sdSEXP, SEXP sigma_p_2_joint_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi0_vec(pi0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1_vec(pi1_vecSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_sigma(a_sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_sigma(b_sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type a_iota(a_iotaSEXP);
    Rcpp::traits::input_parameter< const double& >::type b_iota(b_iotaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type iota_p_joint_proposal_sd(iota_p_joint_proposal_sdSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_p_2_joint_proposal_sd(sigma_p_2_joint_proposal_sdSEXP);
    fnSampIotaVecSigma2VecJoint(sigma_2_vec, iota_vec, Beta_mat, Gamma_mat, Mu_mat, X_mat, s_vec, r_vec, rep_K, pi0_vec, pi1_vec, a_sigma, b_sigma, a_iota, b_iota, Y_mat, iota_p_joint_proposal_sd, sigma_p_2_joint_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampBetaMatGammaMatJointWholeOtu
void fnSampBetaMatGammaMatJointWholeOtu(NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericMatrix Mu_mat, NumericMatrix X_mat, NumericVector sigma_2_vec, NumericVector iota_vec, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector pi0_vec, NumericVector pi1_vec, NumericMatrix Y_mat, const double& beta_jp_joint_otu_proposal_sd);
RcppExport SEXP _anlpsb_fnSampBetaMatGammaMatJointWholeOtu(SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP Mu_matSEXP, SEXP X_matSEXP, SEXP sigma_2_vecSEXP, SEXP iota_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP pi0_vecSEXP, SEXP pi1_vecSEXP, SEXP Y_matSEXP, SEXP beta_jp_joint_otu_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi0_vec(pi0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1_vec(pi1_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_jp_joint_otu_proposal_sd(beta_jp_joint_otu_proposal_sdSEXP);
    fnSampBetaMatGammaMatJointWholeOtu(Beta_mat, Gamma_mat, Mu_mat, X_mat, sigma_2_vec, iota_vec, s_vec, r_vec, rep_K, pi0_vec, pi1_vec, Y_mat, beta_jp_joint_otu_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampBetaMatGammaMatJointWholeOtu2
void fnSampBetaMatGammaMatJointWholeOtu2(NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericMatrix Mu_mat, NumericMatrix X_mat, NumericVector sigma_2_vec, NumericVector iota_vec, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector pi0_vec, NumericVector pi1_vec, NumericMatrix Y_mat, const double& beta_jp_joint_otu_proposal_sd);
RcppExport SEXP _anlpsb_fnSampBetaMatGammaMatJointWholeOtu2(SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP Mu_matSEXP, SEXP X_matSEXP, SEXP sigma_2_vecSEXP, SEXP iota_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP pi0_vecSEXP, SEXP pi1_vecSEXP, SEXP Y_matSEXP, SEXP beta_jp_joint_otu_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi0_vec(pi0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1_vec(pi1_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_jp_joint_otu_proposal_sd(beta_jp_joint_otu_proposal_sdSEXP);
    fnSampBetaMatGammaMatJointWholeOtu2(Beta_mat, Gamma_mat, Mu_mat, X_mat, sigma_2_vec, iota_vec, s_vec, r_vec, rep_K, pi0_vec, pi1_vec, Y_mat, beta_jp_joint_otu_proposal_sd);
    return R_NilValue;
END_RCPP
}
// fnSampBetaMatGammaMatJointWholeOtu3
void fnSampBetaMatGammaMatJointWholeOtu3(NumericMatrix Beta_mat, NumericMatrix Gamma_mat, NumericMatrix Mu_mat, NumericMatrix X_mat, NumericVector sigma_2_vec, NumericVector iota_vec, NumericVector s_vec, NumericVector r_vec, NumericVector rep_K, NumericVector pi0_vec, NumericVector pi1_vec, NumericMatrix Y_mat, const double& beta_jp_joint_otu_proposal_sd);
RcppExport SEXP _anlpsb_fnSampBetaMatGammaMatJointWholeOtu3(SEXP Beta_matSEXP, SEXP Gamma_matSEXP, SEXP Mu_matSEXP, SEXP X_matSEXP, SEXP sigma_2_vecSEXP, SEXP iota_vecSEXP, SEXP s_vecSEXP, SEXP r_vecSEXP, SEXP rep_KSEXP, SEXP pi0_vecSEXP, SEXP pi1_vecSEXP, SEXP Y_matSEXP, SEXP beta_jp_joint_otu_proposal_sdSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Beta_mat(Beta_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Gamma_mat(Gamma_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu_mat(Mu_matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type X_mat(X_matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sigma_2_vec(sigma_2_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type iota_vec(iota_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type s_vec(s_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type r_vec(r_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rep_K(rep_KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi0_vec(pi0_vecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pi1_vec(pi1_vecSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_mat(Y_matSEXP);
    Rcpp::traits::input_parameter< const double& >::type beta_jp_joint_otu_proposal_sd(beta_jp_joint_otu_proposal_sdSEXP);
    fnSampBetaMatGammaMatJointWholeOtu3(Beta_mat, Gamma_mat, Mu_mat, X_mat, sigma_2_vec, iota_vec, s_vec, r_vec, rep_K, pi0_vec, pi1_vec, Y_mat, beta_jp_joint_otu_proposal_sd);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_anlpsb_fnLogLikNoGamma", (DL_FUNC) &_anlpsb_fnLogLikNoGamma, 4},
    {"_anlpsb_fnLogLikNoFac", (DL_FUNC) &_anlpsb_fnLogLikNoFac, 4},
    {"_anlpsb_fnOtuLogLikNoGamma", (DL_FUNC) &_anlpsb_fnOtuLogLikNoGamma, 5},
    {"_anlpsb_fnOtuLogLikNoFac", (DL_FUNC) &_anlpsb_fnOtuLogLikNoFac, 5},
    {"_anlpsb_fnTimepointLogLikNoGamma", (DL_FUNC) &_anlpsb_fnTimepointLogLikNoGamma, 4},
    {"_anlpsb_acceptProposal", (DL_FUNC) &_anlpsb_acceptProposal, 4},
    {"_anlpsb_fnSjTildeLogLik", (DL_FUNC) &_anlpsb_fnSjTildeLogLik, 7},
    {"_anlpsb_fnSampSVec", (DL_FUNC) &_anlpsb_fnSampSVec, 9},
    {"_anlpsb_fnWlLogLik", (DL_FUNC) &_anlpsb_fnWlLogLik, 10},
    {"_anlpsb_fnSampWVec", (DL_FUNC) &_anlpsb_fnSampWVec, 10},
    {"_anlpsb_fnSampEtaVec", (DL_FUNC) &_anlpsb_fnSampEtaVec, 8},
    {"_anlpsb_fnSampC", (DL_FUNC) &_anlpsb_fnSampC, 6},
    {"_anlpsb_fnSampCVec", (DL_FUNC) &_anlpsb_fnSampCVec, 8},
    {"_anlpsb_fnSampLambdaVec", (DL_FUNC) &_anlpsb_fnSampLambdaVec, 7},
    {"_anlpsb_fnRtkTildeLogLik", (DL_FUNC) &_anlpsb_fnRtkTildeLogLik, 9},
    {"_anlpsb_fnSampRVec", (DL_FUNC) &_anlpsb_fnSampRVec, 13},
    {"_anlpsb_fnSampRVecJoint", (DL_FUNC) &_anlpsb_fnSampRVecJoint, 13},
    {"_anlpsb_fnSampRVecJointVertical", (DL_FUNC) &_anlpsb_fnSampRVecJointVertical, 13},
    {"_anlpsb_fnAlpha0jLogLik", (DL_FUNC) &_anlpsb_fnAlpha0jLogLik, 11},
    {"_anlpsb_fnSampAlpha0Vec", (DL_FUNC) &_anlpsb_fnSampAlpha0Vec, 13},
    {"_anlpsb_fnSampAlpha0VecJoint", (DL_FUNC) &_anlpsb_fnSampAlpha0VecJoint, 13},
    {"_anlpsb_fnSampAlpha0VecJointVertical", (DL_FUNC) &_anlpsb_fnSampAlpha0VecJointVertical, 13},
    {"_anlpsb_fnThetamjLogLik", (DL_FUNC) &_anlpsb_fnThetamjLogLik, 7},
    {"_anlpsb_fnSampThetaMat", (DL_FUNC) &_anlpsb_fnSampThetaMat, 9},
    {"_anlpsb_fnSampSigma2Vec", (DL_FUNC) &_anlpsb_fnSampSigma2Vec, 7},
    {"_anlpsb_fnMujVecFromBetajp", (DL_FUNC) &_anlpsb_fnMujVecFromBetajp, 4},
    {"_anlpsb_fnBetajpPriorLik", (DL_FUNC) &_anlpsb_fnBetajpPriorLik, 3},
    {"_anlpsb_fnBetajpLogLik", (DL_FUNC) &_anlpsb_fnBetajpLogLik, 8},
    {"_anlpsb_fnProposeBetajp", (DL_FUNC) &_anlpsb_fnProposeBetajp, 3},
    {"_anlpsb_fnSampBetaMat", (DL_FUNC) &_anlpsb_fnSampBetaMat, 11},
    {"_anlpsb_fnProposeBetajpHat", (DL_FUNC) &_anlpsb_fnProposeBetajpHat, 3},
    {"_anlpsb_fnLogGammaPrior", (DL_FUNC) &_anlpsb_fnLogGammaPrior, 3},
    {"_anlpsb_fnLogBetajpTransition", (DL_FUNC) &_anlpsb_fnLogBetajpTransition, 4},
    {"_anlpsb_fnSampBetaMatGammaMatJoint", (DL_FUNC) &_anlpsb_fnSampBetaMatGammaMatJoint, 13},
    {"_anlpsb_fnBetaGammaAddSwpDel", (DL_FUNC) &_anlpsb_fnBetaGammaAddSwpDel, 12},
    {"_anlpsb_fnIotapLogLik", (DL_FUNC) &_anlpsb_fnIotapLogLik, 7},
    {"_anlpsb_fnSampIotaVec", (DL_FUNC) &_anlpsb_fnSampIotaVec, 7},
    {"_anlpsb_fnGetCurrCat", (DL_FUNC) &_anlpsb_fnGetCurrCat, 1},
    {"_anlpsb_fnImputeZ", (DL_FUNC) &_anlpsb_fnImputeZ, 11},
    {"_anlpsb_fnDLogInvGamma", (DL_FUNC) &_anlpsb_fnDLogInvGamma, 3},
    {"_anlpsb_fnIotapSigmapJointLogLik", (DL_FUNC) &_anlpsb_fnIotapSigmapJointLogLik, 15},
    {"_anlpsb_fnConvertBetaHat", (DL_FUNC) &_anlpsb_fnConvertBetaHat, 3},
    {"_anlpsb_fnSampIotaVecSigma2VecJoint", (DL_FUNC) &_anlpsb_fnSampIotaVecSigma2VecJoint, 18},
    {"_anlpsb_fnSampBetaMatGammaMatJointWholeOtu", (DL_FUNC) &_anlpsb_fnSampBetaMatGammaMatJointWholeOtu, 13},
    {"_anlpsb_fnSampBetaMatGammaMatJointWholeOtu2", (DL_FUNC) &_anlpsb_fnSampBetaMatGammaMatJointWholeOtu2, 13},
    {"_anlpsb_fnSampBetaMatGammaMatJointWholeOtu3", (DL_FUNC) &_anlpsb_fnSampBetaMatGammaMatJointWholeOtu3, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_anlpsb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
